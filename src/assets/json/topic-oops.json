{   
    "id": "topic-101",
    "sectionId": "section-100",
    "topicTitle": "OOP Concepts",
    "topicSummary": [
        "This is a summary on object oriented programming."
    ],
    "topicSlides": [        
        {
            "slideIndex": 1,
            "slideTitle": "Building Blocks",
            "slideCards": [
                {
                    "cardIndex": 1,
                    "cardTitle": "What are the building blocks of Java object oriented Programming?",
                    "cardDetails": [
                        "This is object oriented programming."
                    ]
                },
                {
                    "cardIndex": 2,
                    "cardTitle": "Concepts",
                    "cardImagePath": "img/oop1.png",
                    "cardDetails": [
                        "1. Abstraction",
                        "2. Encapsulation",
                        "3. Inheritance",
                        "4. Polymorphism"
                    ]
                }
            ]
        },
        {
            "slideIndex": 2,
            "slideTitle": "Abstraction",
            "slideCards": [
                {
                    "cardIndex": 1,
                    "cardTitle": "What is Abstraction in Object Oriented Programming?",
                    "cardDetails": [
                        "This is object oriented programming."
                    ]
                },
                {
                    "cardIndex": 2,
                    "cardTitle": "Abstraction",
                    "cardDetails": [
                        "In common terms, abstraction means a thing which exists as an idea and may not have physical existence or can have many physical appearances. E.g. chair as concept and physically there are many types of chairs.",
                        "In programming language abstraction means a layer behind which all the implementation details are hidden. And only this layer is visible to client programs.",
                        "In java abstraction is achieved using interfaces and abstract classes."
                    ]
                },
                {
                    "cardIndex": 3,
                    "cardTitle": "Examples",
                    "cardDetails": [
                        "Give some good examples here."
                    ]
                }
            ]
        }
    ]
}